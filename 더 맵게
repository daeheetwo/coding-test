import heapq

def solution(scoville, K):
    # 리스트를 힙으로 변환 (최소 힙)
    heapq.heapify(scoville)
    answer = 0

    # 가장 작은 값이 K 이상이 될 때까지 반복
    while len(scoville) > 1:
        if scoville[0] >= K:  # 힙에서 가장 작은 값이 K 이상이면 종료
            return answer
        
        # 가장 맵지 않은 두 음식을 섞음
        first = heapq.heappop(scoville)  # 가장 작은 값 꺼냄
        second = heapq.heappop(scoville)  # 두 번째로 작은 값 꺼냄
        new_scoville = first + (second * 2)
        
        # 섞은 결과를 다시 힙에 삽입
        heapq.heappush(scoville, new_scoville)
        answer += 1

    # 모든 음식을 섞었는데도 가장 작은 값이 K 이상이 아닌 경우 -1 반환
    if scoville[0] < K:
        return -1

    return answer

# 사용자 입력 처리
scoville = list(map(int, input().split()))  # scoville 리스트 입력
K = int(input())  # 원하는 스코빌 지수 K 입력

# 결과 출력
count = solution(scoville, K)
print(count)
//


def solution(scoville, K):
    answer = 0
    
    while len(scoville) > 1:
        scoville.sort()
        
        if scoville[0] >= K:
            return answer
    
        new_scoville = scoville[0] + (scoville[1] * 2)
        
        scoville = scoville[2:]
        scoville.append(new_scoville)
        
        answer += 1
        
    if scoville[0] < K:
        return -1
    
    return answer



scoville = list(map(int, input().split()))
K = int(input())


count = solution(scoville, K)
print(count)
